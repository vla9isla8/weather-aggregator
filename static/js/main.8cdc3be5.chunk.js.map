{"version":3,"sources":["App.tsx","providers/MsnProvider.ts","providers/OpenWeatherProvider.ts","serviceWorker.ts","index.tsx","entities/Weather.ts"],"names":["providers","OpenWeatherProvider","MsnProvider","moment","locale","iOS","process","browser","test","navigator","userAgent","withStyles","theme","createStyles","root","paddingTop","field","flex","providerHeader","display","position","top","backgroundColor","palette","background","default","opacity","weather","drawer","width","flexShrink","drawerPaper","menuButton","marginRight","spacing","classes","useState","datas","setDatas","selectedProviders","setSelectedProviders","city","setCity","onChangeCity","useCallback","value","target","localStorage","setItem","useEffect","storedProviders","getItem","storedCity","JSON","parse","breaked","v","a","data","filteredProviders","filter","name","undefined","length","provider","getWeather","then","valuesMap","reduce","prev","next","date","getDate","push","get","React","open","setOpen","toggleDrawerOpen","stringify","tab","setTab","tabs","useMemo","Array","fill","map","_","idx","add","color","aria-label","onClick","edge","className","paddingLeft","paddingRight","fullWidth","label","onChange","overflow","variant","format","disableBackdropTransition","anchor","onClose","onOpen","paper","padding","control","checked","paddingBottom","key","component","Card","height","title","tempreratureDay","tempreratureNight","description","getData","fetch","encodeURI","resp","xml2js","text","charkey","attrkey","explicitArray","mergeAttrs","parseStringPromise","values","weatherdata","forecast","Weather","Date","parseFloat","high","low","skytextday","console","error","apiKey","setLang","setUnits","setAPPID","Promise","resolve","reject","getWeatherForecastForDays","err","obj","this","list","parseInt","dt","temp","day","night","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8cdc3be5.chunk.js","sourcesContent":["import {\n  AppBar, Box, Card, CardContent, CardHeader,\n  Checkbox, createStyles, CssBaseline,\n  FormControlLabel, FormGroup, IconButton, Paper,\n  SwipeableDrawer,\n  Tab, Tabs, TextField, Theme, Toolbar,\n  Typography, WithStyles, withStyles\n} from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport moment from \"moment\";\nimport \"moment/locale/ru\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport Weather from './entities/Weather';\nimport IProvider from \"./providers/IProvider\";\nimport MsnProvider from \"./providers/MsnProvider\";\nimport OpenWeatherProvider from './providers/OpenWeatherProvider';\n\nconst providers: IProvider[] = [\n  new OpenWeatherProvider(\"6d0e27996f99802be89d9575a5dfb7ca\"),\n  new MsnProvider()\n];\n\nmoment.locale(\"ru-RU\");\n\nconst drawerWidth = 240;\n\nconst styles = (theme: Theme) => createStyles({\n  root: {\n    paddingTop: 128\n  },\n  field: {\n    flex: 1\n  },\n  providerHeader: {\n    display: \"inline-block\",\n    position: 'sticky', \n    top: 0,\n    backgroundColor: theme.palette.background.default,\n    opacity: 0.6\n  },\n  weather: {\n    position: 'sticky', \n    top: 0\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  }\n})\n\ntype DataType = {\n  provider: string, \n  data: {\n    [\n      /**\n       * Iso date\n       */\n      key: string\n    ]: Weather\n  }\n};\n\n//@ts-ignore\nconst iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\nfunction App({classes}: WithStyles<typeof styles>) {\n  const [datas, setDatas] = useState<DataType[]>([]);\n  const [selectedProviders, setSelectedProviders] = useState<{[key: string]:boolean}>({});\n  const [city, setCity] = useState<string>(\"\");\n\n  const onChangeCity:  React.ChangeEventHandler<HTMLInputElement> = useCallback(({target: {value}}) => {\n    localStorage.setItem(\"city\",value);\n    setCity(value);\n  },[]);\n\n  useEffect(()=>{\n    const storedProviders = localStorage.getItem(\"selectedProviders\");\n    const storedCity = localStorage.getItem(\"city\");\n    if (storedProviders){\n      setSelectedProviders(JSON.parse(storedProviders));\n    }\n    if (storedCity){\n      setCity(storedCity);\n    }\n  },[]);\n\n\n  useEffect(() => {\n    let breaked = {v:false};\n    const get = async () => {\n      const data: DataType[] = [];\n      const filteredProviders = providers.filter(\n        ({ name }) => selectedProviders[name] === undefined ? true : selectedProviders[name]\n      );\n      if (filteredProviders.length > 0) {\n        for (const provider of filteredProviders) {\n          provider.getWeather(city).then((value: Weather[] = []) => {\n            const valuesMap = value.reduce((prev, next) => ({\n              ...prev,\n              [next.date.getDate()]: next\n            }), {} as DataType[\"data\"]);\n            data.push({\n              data: valuesMap,\n              provider: provider.name\n            });\n            if (!breaked.v) {\n              setDatas([...data]);\n            }\n          });\n        }\n      } else {\n        setDatas([]);\n      }\n    };\n    get();\n    return () => {\n      breaked.v = true;\n    }\n  }, [city, selectedProviders]);\n\n  const [open, setOpen] = React.useState(false);\n\n  const toggleDrawerOpen = useCallback(() => {\n    setOpen(open=>!open);\n  },[]);\n\n  useEffect(()=>{\n    localStorage.setItem(\"selectedProviders\",JSON.stringify(selectedProviders));\n  },[selectedProviders]);\n\n  const [tab, setTab] = React.useState(moment().date());\n\n  const tabs = useMemo(() => new Array(5).fill(null).map((_,idx)=>moment().add(\"day\",idx)),[]);\n\n  return (\n    <>\n      <CssBaseline/>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={toggleDrawerOpen}\n            edge=\"start\"\n            className={classes.menuButton}\n          >\n            <Menu/>\n          </IconButton>\n          <Paper className={classes.field}>\n            <Box paddingLeft={1} paddingRight={1}>\n              <TextField\n                fullWidth\n                name=\"city\" \n                label=\"Город\" \n                value={city}\n                onChange={onChangeCity}\n              />\n            </Box>\n          </Paper>\n        </Toolbar>\n        <Box flex={1} overflow=\"hidden\">\n            <Tabs value={tab} onChange={(_,v)=>setTab(v)} variant=\"scrollable\" >\n                {tabs.map(v=> (\n                  <Tab value={v.date()} label={v.format(\"dddd, L\")} />\n                ))}\n            </Tabs>\n          </Box>\n      </AppBar>\n      <SwipeableDrawer\n        disableBackdropTransition={!iOS}\n        className={classes.drawer}\n        anchor=\"left\"\n        open={open}\n        onClose={toggleDrawerOpen}\n        onOpen={toggleDrawerOpen}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <Box padding={1}>\n          <Typography variant=\"h6\">Провайдеры</Typography>\n          <FormGroup >\n            {providers.map(({name})=>(\n              <FormControlLabel label={name} control={\n                <Checkbox\n                  name={`checked${name}`}\n                  color=\"primary\"\n                  checked={selectedProviders[name] === undefined ? true : selectedProviders[name]}\n                  onChange={(_,checked)=> setSelectedProviders(selectedProviders=> ({\n                    ...selectedProviders,\n                    [name]: checked\n                  }))}\n                />\n              }/>\n            ))}\n          </FormGroup>\n        </Box>\n      </SwipeableDrawer>\n      <Box className={classes.root}>\n          {datas.map(({provider,data})=> (\n            <Box display=\"inline-block\" paddingTop={1} paddingBottom={1} key={provider} >\n                {data[tab] && (\n                  <Box\n                    flex={1} \n                    padding={1}\n                  >\n                    <Box component={Card} height={1} >\n                      <CardHeader title={provider} />\n                      <CardContent>\n                        <Typography variant=\"subtitle2\">Днем: <b>{data[tab].tempreratureDay}&#176;</b></Typography>\n                        <Typography variant=\"subtitle2\">Ночью: <b>{data[tab].tempreratureNight}&#176;</b></Typography>\n                        <Typography variant=\"subtitle1\">{data[tab].description}</Typography>\n                      </CardContent>\n                    </Box>\n                  </Box>\n                )}\n            </Box>          \n        ))}\n      </Box>\n    </>\n  );\n}\n\nexport default withStyles(styles)(App);\n","import IProvider from \"./IProvider\";\nimport Weather from \"../entities/Weather\";\nimport xml2js from \"xml2js\";\n\ntype MsnData = {\n    \"location\": {\n    \"name\": \"San Francisco, CA\",\n    \"lat\": \"37.777\",\n    \"long\": \"-122.42\",\n    \"timezone\": \"-7\",\n    \"alert\": \"\",\n    \"degreetype\": \"F\",\n    \"imagerelativeurl\": \"http://blob.weather.microsoft.com/static/weather4/en-us/\"\n    },\n    \"current\": {\n    \"temperature\": \"70\",\n    \"skycode\": \"32\",\n    \"skytext\": \"Sunny\",\n    \"date\": \"2017-03-14\",\n    \"observationtime\": \"13:15:00\",\n    \"observationpoint\": \"San Francisco, California\",\n    \"feelslike\": \"70\",\n    \"humidity\": \"59\",\n    \"winddisplay\": \"3 mph West\",\n    \"day\": \"Tuesday\",\n    \"shortday\": \"Tue\",\n    \"windspeed\": \"3 mph\",\n    \"imageUrl\": \"http://blob.weather.microsoft.com/static/weather4/en-us/law/32.gif\"\n    },\n    \"forecast\": [\n        {\n            \"low\": \"52\",\n            \"high\": \"69\",\n            \"skycodeday\": \"31\",\n            \"skytextday\": \"Clear\",\n            \"date\": \"2017-03-13\",\n            \"day\": \"Monday\",\n            \"shortday\": \"Mon\",\n            \"precip\": \"\"\n        },\n        {\n            \"low\": \"52\",\n            \"high\": \"70\",\n            \"skycodeday\": \"34\",\n            \"skytextday\": \"Mostly Sunny\",\n            \"date\": \"2017-03-14\",\n            \"day\": \"Tuesday\",\n            \"shortday\": \"Tue\",\n            \"precip\": \"10\"\n        },\n        {\n            \"low\": \"56\",\n            \"high\": \"63\",\n            \"skycodeday\": \"26\",\n            \"skytextday\": \"Cloudy\",\n            \"date\": \"2017-03-15\",\n            \"day\": \"Wednesday\",\n            \"shortday\": \"Wed\",\n            \"precip\": \"20\"\n        },\n        {\n            \"low\": \"50\",\n            \"high\": \"64\",\n            \"skycodeday\": \"28\",\n            \"skytextday\": \"Mostly Cloudy\",\n            \"date\": \"2017-03-16\",\n            \"day\": \"Thursday\",\n            \"shortday\": \"Thu\",\n            \"precip\": \"10\"\n        },\n        {\n            \"low\": \"53\",\n            \"high\": \"67\",\n            \"skycodeday\": \"32\",\n            \"skytextday\": \"Sunny\",\n            \"date\": \"2017-03-17\",\n            \"day\": \"Friday\",\n            \"shortday\": \"Fri\",\n            \"precip\": \"10\"\n        }\n    ]\n}\n\nasync function getData(city: string) {\n    const resp = await fetch(\n        encodeURI(\n            `https://weather.service.msn.com/data.aspx?weasearchstr=${city}&culture=ru-RU&weadegreetype=C&src=outlook`\n        )\n    );\n    const values = await xml2js.parseStringPromise(await resp.text(), { charkey: 'C$', attrkey: 'A$', explicitArray: true, mergeAttrs: true });\n    return values.weatherdata.weather[0] as MsnData;\n}\n\nexport default class MsnProvider implements IProvider {\n    name: string = \"MSN\";\n    async getWeather(city: string) {\n        try {\n            const data = await getData(city);\n            return data.forecast.map(data => new Weather(\n                new Date(data.date[0]),\n                parseFloat(data.high[0]),\n                parseFloat(data.low[0]),\n                data.skytextday[0]\n            ));\n        } catch(e) {\n            console.error(e);\n            return undefined;\n        }\n    };\n}\n","import IProvider from \"./IProvider\";\nimport Weather from \"../entities/Weather\";\n\ntype OpenWeatherData = {\n    city:{\n        \"id\": number,\n        \"name\": string,\n        \"coord\": {\n          \"lon\": number,\n          \"lat\": number\n        },\n        \"country\": string,\n        \"population\": number,\n        \"timezone\": number\n      },\n    list: {\n        \"dt\": number,\n        \"sunrise\": number,\n        \"sunset\": number,\n        \"temp\": {\n          \"day\": number,\n          \"min\": number,\n          \"max\": number,\n          \"night\": number,\n          \"eve\": number,\n          \"morn\": number\n        },\n        \"feels_like\": {\n          \"day\": number,\n          \"night\": number,\n          \"eve\": number,\n          \"morn\": number\n        },\n        \"pressure\": number,\n        \"humidity\": number,\n        \"weather\": [\n          {\n            \"id\": number,\n            \"main\": string,\n            \"description\": string,\n            \"icon\": string\n          }\n        ],\n        \"speed\": number,\n        \"deg\": number,\n        \"clouds\": number\n    }[]\n    cod:number,\n    cnt: number\n}\n\nasync function getData(city: string, apiKey: string): Promise<OpenWeatherData> {\n    //@ts-ignore-next-line\n    const weather = await import('openweather-apis');\n    weather.setLang('ru');\n    weather.setUnits('metric');\n    weather.setCity(city);\n    weather.setAPPID(apiKey);\n    return new Promise((resolve, reject) => weather.getWeatherForecastForDays(5, function(err: string, obj: OpenWeatherData){\n        if (!err) {\n            resolve(obj);\n        } else {\n            reject(err)\n        }\n    }));\n}\n\nexport default class OpenWeatherProvider implements IProvider {\n    public readonly name: string = \"OpenWeather\";\n    constructor(private readonly apiKey: string) { }\n    async getWeather(city: string) {\n        try {\n            const {list} = await getData(city,this.apiKey);\n            return list.map((next) => new Weather(\n                new Date(parseInt(`${next.dt}000`)),\n                next.temp.day,\n                next.temp.night,\n                next.weather[0].description\n            ));\n        } catch(e) {\n            console.error(e);\n            return undefined;\n        }\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default class Weather {\n    constructor(\n        public readonly date: Date,\n        public readonly tempreratureDay: number,\n        public readonly tempreratureNight: number,\n        public readonly description: string,\n    ) {}\n}\n"],"sourceRoot":""}