{"version":3,"sources":["entities/Weather.ts","providers/OpenWeatherProvider.ts","providers/MsnProvider.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Weather","date","tempreratureDay","tempreratureNight","description","getData","city","apiKey","a","weather","setLang","setUnits","setCity","setAPPID","Promise","resolve","reject","getWeatherForecastForDays","err","obj","OpenWeatherProvider","name","this","list","map","next","Date","parseInt","dt","temp","day","night","console","error","fetch","encodeURI","resp","xml2js","text","charkey","attrkey","explicitArray","mergeAttrs","parseStringPromise","values","weatherdata","MsnProvider","data","forecast","parseFloat","high","low","skytextday","providers","App","useState","datas","setDatas","localStorage","getItem","onChangeCity","useCallback","value","target","setItem","useEffect","breaked","provider","getWeather","then","get","CssBaseline","Box","display","flexDirection","height","overflow","padding","FormGroup","TextField","label","onChange","flex","Object","keys","key","Typography","variant","paddingTop","Grid","container","spacing","idx","item","Card","CardHeader","title","toLocaleDateString","CardContent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6YAAqBA,EACjB,WACoBC,EACAC,EACAC,EACAC,GACjB,yBAJiBH,OAIlB,KAHkBC,kBAGlB,KAFkBC,oBAElB,KADkBC,e,SC8CTC,E,gFAAf,WAAuBC,EAAcC,GAArC,eAAAC,EAAA,sEAE0B,wDAF1B,cAEUC,EAFV,QAGYC,QAAQ,MAChBD,EAAQE,SAAS,UACjBF,EAAQG,QAAQN,GAChBG,EAAQI,SAASN,GANrB,kBAOW,IAAIO,SAAQ,SAACC,EAASC,GAAV,OAAqBP,EAAQQ,0BAA0B,GAAG,SAASC,EAAaC,GAC1FD,EAGDF,EAAOE,GAFPH,EAAQI,UATpB,4C,0BAgBqBC,E,WAEjB,WAA6Bb,GAAiB,yBAAjBA,SAAgB,KAD7Bc,KAAe,c,gGAEdf,G,kGAEYD,EAAQC,EAAKgB,KAAKf,Q,uBAAhCgB,E,EAAAA,K,kBACAA,EAAKC,KAAI,SAACC,GAAD,OAAU,IAAIzB,EAC1B,IAAI0B,KAAKC,SAAS,GAAD,OAAIF,EAAKG,GAAT,SACjBH,EAAKI,KAAKC,IACVL,EAAKI,KAAKE,MACVN,EAAKhB,QAAQ,GAAGL,iB,uCAGpB4B,QAAQC,MAAR,M,kBACO,M,iJCEJ5B,E,8EAAf,WAAuBC,GAAvB,iBAAAE,EAAA,sEACuB0B,MACfC,UAAU,0DAAD,OACqD7B,EADrD,gDAFjB,cACU8B,EADV,YAMyBC,IANzB,SAMyDD,EAAKE,OAN9D,+BAMsE,CAAEC,QAAS,KAAMC,QAAS,KAAMC,eAAe,EAAMC,YAAY,GANvI,eAMgCC,mBANhC,oCAMUC,EANV,yBAOWA,EAAOC,YAAYpC,QAAQ,IAPtC,6C,0BAUqBqC,E,iDACjBzB,KAAe,M,gGACEf,G,gGAEUD,EAAQC,G,cAArByC,E,yBACCA,EAAKC,SAASxB,KAAI,SAAAuB,GAAI,OAAI,IAAI/C,EACjC,IAAI0B,KAAKqB,EAAK9C,KAAK,IACnBgD,WAAWF,EAAKG,KAAK,IACrBD,WAAWF,EAAKI,IAAI,IACpBJ,EAAKK,WAAW,Q,uCAGpBpB,QAAQC,MAAR,M,kBACO,M,uHCrGboB,EAAY,CAChB,IAAIjC,EAAoB,oCACxB,IAAI0B,GAqESQ,MAlEf,WAAgB,IAAD,EACaC,mBAAoC,IADjD,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAiBG,aAAaC,QAAQ,SAAW,IAF5D,mBAENrD,EAFM,KAEAM,EAFA,KAIPgD,EAA4DC,uBAAY,YAAwB,IAAbC,EAAY,EAArBC,OAASD,MACvFJ,aAAaM,QAAQ,OAAOF,GAC5BlD,EAAQkD,KACR,IAsBF,OApBAG,qBAAU,WACR,IAAIC,GAAU,EAed,OAdS,uCAAG,gCAAA1D,EAAA,oEACa6C,GADb,IACV,IADU,iBACCc,EADD,QAGRA,EAASC,WAAW9D,GAAM+D,MAAK,SAAAP,GACxBI,GACHT,GAAS,SAAAD,GAAK,kCACPA,GADO,kBAETW,EAAS9C,KAAOyC,GAAS,YANpC,uBAAmC,IADzB,yEAAH,oDAaTQ,GACO,WACLJ,GAAU,KAEZ,CAAC5D,IAED,oCACE,kBAACiE,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAASC,OAAQ,EAAGC,SAAS,UAC7D,kBAACJ,EAAA,EAAD,CAAKK,QAAS,GACZ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAW1D,KAAK,OAAO2D,MAAM,iCAAQlB,MAAOxD,EAAM2E,SAAUrB,MAGhE,kBAACY,EAAA,EAAD,CAAKU,KAAM,EAAGN,SAAS,QAClBO,OAAOC,KAAK5B,GAAOhC,KAAI,SAAC2C,GAAD,OACpB,kBAACK,EAAA,EAAD,CAAKa,IAAKlB,EAAUU,QAAS,GAC3B,kBAACS,EAAA,EAAD,CAAYC,QAAQ,MAAMpB,GAC1B,kBAACK,EAAA,EAAD,CAAKgB,WAAY,GACf,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACtBnC,EAAMW,GAAU3C,KAAI,SAACuB,EAAK6C,GAAN,OACnB,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACR,IAAKO,GACd,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAOjD,EAAK9C,KAAKgG,uBAC7B,kBAACC,EAAA,EAAD,KACE,kBAACZ,EAAA,EAAD,CAAYC,QAAQ,aAAaxC,EAAK3C,aACtC,kBAACkF,EAAA,EAAD,CAAYC,QAAQ,aAApB,6BAAuCxC,EAAK7C,iBAC5C,kBAACoF,EAAA,EAAD,CAAYC,QAAQ,aAApB,mCAAwCxC,EAAK5C,mCCjDrEgG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTrC,MAAK,SAAA0C,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BrF,QAAQsF,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlB/E,QAAQsF,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAxF,GACLD,QAAQC,MAAM,4CAA6CA,MClGjEyF,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAImB,IACpBC,sBACA3B,OAAOC,SAAS2B,MAEJC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,sBAAN,sBAEP7B,IAgEV,SAAiCO,EAAeC,GAE9CzE,MAAMwE,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5B/D,MAAK,SAAAgE,GAEJ,IAAMC,EAAcD,EAASD,QAAQ9D,IAAI,gBAEnB,MAApB+D,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMpE,MAAK,SAAA0C,GACjCA,EAAa2B,aAAarE,MAAK,WAC7BgC,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLzF,QAAQsF,IACN,oEAvFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMpE,MAAK,WACjCrC,QAAQsF,IACN,iHAMJb,EAAgBC,EAAOC,OC1C/BE,I","file":"static/js/main.30d506a5.chunk.js","sourcesContent":["export default class Weather {\n    constructor(\n        public readonly date: Date,\n        public readonly tempreratureDay: number,\n        public readonly tempreratureNight: number,\n        public readonly description: string,\n    ) {}\n}\n","import IProvider from \"./IProvider\";\nimport Weather from \"../entities/Weather\";\n\ntype OpenWeatherData = {\n    city:{\n        \"id\": number,\n        \"name\": string,\n        \"coord\": {\n          \"lon\": number,\n          \"lat\": number\n        },\n        \"country\": string,\n        \"population\": number,\n        \"timezone\": number\n      },\n    list: {\n        \"dt\": number,\n        \"sunrise\": number,\n        \"sunset\": number,\n        \"temp\": {\n          \"day\": number,\n          \"min\": number,\n          \"max\": number,\n          \"night\": number,\n          \"eve\": number,\n          \"morn\": number\n        },\n        \"feels_like\": {\n          \"day\": number,\n          \"night\": number,\n          \"eve\": number,\n          \"morn\": number\n        },\n        \"pressure\": number,\n        \"humidity\": number,\n        \"weather\": [\n          {\n            \"id\": number,\n            \"main\": string,\n            \"description\": string,\n            \"icon\": string\n          }\n        ],\n        \"speed\": number,\n        \"deg\": number,\n        \"clouds\": number\n    }[]\n    cod:number,\n    cnt: number\n}\n\nasync function getData(city: string, apiKey: string): Promise<OpenWeatherData> {\n    //@ts-ignore-next-line\n    const weather = await import('openweather-apis');\n    weather.setLang('ru');\n    weather.setUnits('metric');\n    weather.setCity(city);\n    weather.setAPPID(apiKey);\n    return new Promise((resolve, reject) => weather.getWeatherForecastForDays(5, function(err: string, obj: OpenWeatherData){\n        if (!err) {\n            resolve(obj);\n        } else {\n            reject(err)\n        }\n    }));\n}\n\nexport default class OpenWeatherProvider implements IProvider {\n    public readonly name: string = \"OpenWeather\";\n    constructor(private readonly apiKey: string) { }\n    async getWeather(city: string) {\n        try {\n            const {list} = await getData(city,this.apiKey);\n            return list.map((next) => new Weather(\n                new Date(parseInt(`${next.dt}000`)),\n                next.temp.day,\n                next.temp.night,\n                next.weather[0].description\n            ));\n        } catch(e) {\n            console.error(e);\n            return null;\n        }\n    }\n}","import IProvider from \"./IProvider\";\nimport Weather from \"../entities/Weather\";\nimport xml2js from \"xml2js\";\n\ntype MsnData = {\n    \"location\": {\n    \"name\": \"San Francisco, CA\",\n    \"lat\": \"37.777\",\n    \"long\": \"-122.42\",\n    \"timezone\": \"-7\",\n    \"alert\": \"\",\n    \"degreetype\": \"F\",\n    \"imagerelativeurl\": \"http://blob.weather.microsoft.com/static/weather4/en-us/\"\n    },\n    \"current\": {\n    \"temperature\": \"70\",\n    \"skycode\": \"32\",\n    \"skytext\": \"Sunny\",\n    \"date\": \"2017-03-14\",\n    \"observationtime\": \"13:15:00\",\n    \"observationpoint\": \"San Francisco, California\",\n    \"feelslike\": \"70\",\n    \"humidity\": \"59\",\n    \"winddisplay\": \"3 mph West\",\n    \"day\": \"Tuesday\",\n    \"shortday\": \"Tue\",\n    \"windspeed\": \"3 mph\",\n    \"imageUrl\": \"http://blob.weather.microsoft.com/static/weather4/en-us/law/32.gif\"\n    },\n    \"forecast\": [\n        {\n            \"low\": \"52\",\n            \"high\": \"69\",\n            \"skycodeday\": \"31\",\n            \"skytextday\": \"Clear\",\n            \"date\": \"2017-03-13\",\n            \"day\": \"Monday\",\n            \"shortday\": \"Mon\",\n            \"precip\": \"\"\n        },\n        {\n            \"low\": \"52\",\n            \"high\": \"70\",\n            \"skycodeday\": \"34\",\n            \"skytextday\": \"Mostly Sunny\",\n            \"date\": \"2017-03-14\",\n            \"day\": \"Tuesday\",\n            \"shortday\": \"Tue\",\n            \"precip\": \"10\"\n        },\n        {\n            \"low\": \"56\",\n            \"high\": \"63\",\n            \"skycodeday\": \"26\",\n            \"skytextday\": \"Cloudy\",\n            \"date\": \"2017-03-15\",\n            \"day\": \"Wednesday\",\n            \"shortday\": \"Wed\",\n            \"precip\": \"20\"\n        },\n        {\n            \"low\": \"50\",\n            \"high\": \"64\",\n            \"skycodeday\": \"28\",\n            \"skytextday\": \"Mostly Cloudy\",\n            \"date\": \"2017-03-16\",\n            \"day\": \"Thursday\",\n            \"shortday\": \"Thu\",\n            \"precip\": \"10\"\n        },\n        {\n            \"low\": \"53\",\n            \"high\": \"67\",\n            \"skycodeday\": \"32\",\n            \"skytextday\": \"Sunny\",\n            \"date\": \"2017-03-17\",\n            \"day\": \"Friday\",\n            \"shortday\": \"Fri\",\n            \"precip\": \"10\"\n        }\n    ]\n}\n\nasync function getData(city: string) {\n    const resp = await fetch(\n        encodeURI(\n            `https://weather.service.msn.com/data.aspx?weasearchstr=${city}&culture=ru-RU&weadegreetype=C&src=outlook`\n        )\n    );\n    const values = await xml2js.parseStringPromise(await resp.text(), { charkey: 'C$', attrkey: 'A$', explicitArray: true, mergeAttrs: true });\n    return values.weatherdata.weather[0] as MsnData;\n}\n\nexport default class MsnProvider implements IProvider {\n    name: string = \"MSN\";\n    async getWeather(city: string) {\n        try {\n            const data = await getData(city);\n            return data.forecast.map(data => new Weather(\n                new Date(data.date[0]),\n                parseFloat(data.high[0]),\n                parseFloat(data.low[0]),\n                data.skytextday[0]\n            ));\n        } catch(e) {\n            console.error(e);\n            return null;\n        }\n    };\n}\n","import { Box, Card, CardContent, CardHeader, CssBaseline, FormGroup, Grid, TextField, Typography } from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Weather from './entities/Weather';\nimport OpenWeatherProvider from './providers/OpenWeatherProvider';\nimport MsnProvider from \"./providers/MsnProvider\";\nconst providers = [\n  new OpenWeatherProvider(\"6d0e27996f99802be89d9575a5dfb7ca\"),\n  new MsnProvider()\n];\n\nfunction App() {\n  const [datas, setDatas] = useState<{[key: string]:Weather[]}>({});\n  const [city, setCity] = useState<string>(localStorage.getItem(\"city\") || \"\");\n\n  const onChangeCity:  React.ChangeEventHandler<HTMLInputElement> = useCallback(({target: {value}}) => {\n    localStorage.setItem(\"city\",value);\n    setCity(value);\n  },[]);\n\n  useEffect(() => {\n    let breaked = false;\n    const get = async () => {\n      for (const provider of providers) {\n        // eslint-disable-next-line\n        provider.getWeather(city).then(value=> {\n          if (!breaked) {\n            setDatas(datas=> ({\n                ...datas,\n                [provider.name]: value || []\n            }));\n          }\n        });\n      }\n    };\n    get();\n    return () => {\n      breaked = true;\n    }\n  },[city]);\n  return (\n    <>\n      <CssBaseline/>\n      <Box display=\"flex\" flexDirection=\"column\" height={1} overflow=\"hidden\">\n        <Box padding={3}>  \n          <FormGroup>\n            <TextField name=\"city\" label=\"Город\" value={city} onChange={onChangeCity}/>\n          </FormGroup>\n        </Box>\n        <Box flex={1} overflow=\"auto\">\n            {Object.keys(datas).map((provider)=> (\n                <Box key={provider} padding={3}>\n                  <Typography variant=\"h4\">{provider}</Typography>\n                  <Box paddingTop={3}>\n                    <Grid container spacing={2} >\n                      {datas[provider].map((data,idx) => (\n                        <Grid item key={idx}>\n                          <Card>\n                            <CardHeader title={data.date.toLocaleDateString()}/>\n                            <CardContent>\n                              <Typography variant=\"subtitle1\">{data.description}</Typography>\n                              <Typography variant=\"subtitle2\">Днем: {data.tempreratureDay}</Typography>\n                              <Typography variant=\"subtitle2\">Ночью: {data.tempreratureNight}</Typography>\n                            </CardContent>\n                          </Card>\n                        </Grid>\n                      ))}\n                    </Grid>\n                  </Box>\n                </Box>\n            ))}\n        </Box>\n      </Box>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}