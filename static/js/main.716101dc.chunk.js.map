{"version":3,"sources":["entities/Weather.ts","providers/MsnProvider.ts","providers/OpenWeatherProvider.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Weather","date","tempreratureDay","tempreratureNight","description","getData","city","a","fetch","encodeURI","resp","xml2js","text","charkey","attrkey","explicitArray","mergeAttrs","parseStringPromise","values","weatherdata","weather","MsnProvider","name","data","forecast","map","Date","parseFloat","high","low","skytextday","console","error","apiKey","setLang","setUnits","setCity","setAPPID","Promise","resolve","reject","getWeatherForecastForDays","err","obj","providers","this","list","next","parseInt","dt","temp","day","night","moment","locale","withStyles","theme","createStyles","root","paddingTop","providerHeader","display","position","top","opacity","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","drawer","flexShrink","drawerPaper","menuButton","marginRight","spacing","hide","classes","useState","datas","setDatas","selectedProviders","setSelectedProviders","onChangeCity","useCallback","value","target","localStorage","setItem","useEffect","storedProviders","getItem","storedCity","JSON","parse","breaked","v","filter","undefined","provider","getWeather","then","get","React","open","setOpen","toggleDrawerOpen","stringify","CssBaseline","AppBar","className","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Menu","Paper","Box","padding","TextField","label","onChange","Drawer","variant","anchor","paper","Typography","FormGroup","FormControlLabel","control","Checkbox","checked","_","flexDirection","height","overflow","flex","Object","keys","key","paddingBottom","idx","paddingLeft","paddingRight","length","component","Card","CardHeader","title","format","CardContent","Divider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.716101dc.chunk.js","sourcesContent":["export default class Weather {\n    constructor(\n        public readonly date: Date,\n        public readonly tempreratureDay: number,\n        public readonly tempreratureNight: number,\n        public readonly description: string,\n    ) {}\n}\n","import IProvider from \"./IProvider\";\nimport Weather from \"../entities/Weather\";\nimport xml2js from \"xml2js\";\n\ntype MsnData = {\n    \"location\": {\n    \"name\": \"San Francisco, CA\",\n    \"lat\": \"37.777\",\n    \"long\": \"-122.42\",\n    \"timezone\": \"-7\",\n    \"alert\": \"\",\n    \"degreetype\": \"F\",\n    \"imagerelativeurl\": \"http://blob.weather.microsoft.com/static/weather4/en-us/\"\n    },\n    \"current\": {\n    \"temperature\": \"70\",\n    \"skycode\": \"32\",\n    \"skytext\": \"Sunny\",\n    \"date\": \"2017-03-14\",\n    \"observationtime\": \"13:15:00\",\n    \"observationpoint\": \"San Francisco, California\",\n    \"feelslike\": \"70\",\n    \"humidity\": \"59\",\n    \"winddisplay\": \"3 mph West\",\n    \"day\": \"Tuesday\",\n    \"shortday\": \"Tue\",\n    \"windspeed\": \"3 mph\",\n    \"imageUrl\": \"http://blob.weather.microsoft.com/static/weather4/en-us/law/32.gif\"\n    },\n    \"forecast\": [\n        {\n            \"low\": \"52\",\n            \"high\": \"69\",\n            \"skycodeday\": \"31\",\n            \"skytextday\": \"Clear\",\n            \"date\": \"2017-03-13\",\n            \"day\": \"Monday\",\n            \"shortday\": \"Mon\",\n            \"precip\": \"\"\n        },\n        {\n            \"low\": \"52\",\n            \"high\": \"70\",\n            \"skycodeday\": \"34\",\n            \"skytextday\": \"Mostly Sunny\",\n            \"date\": \"2017-03-14\",\n            \"day\": \"Tuesday\",\n            \"shortday\": \"Tue\",\n            \"precip\": \"10\"\n        },\n        {\n            \"low\": \"56\",\n            \"high\": \"63\",\n            \"skycodeday\": \"26\",\n            \"skytextday\": \"Cloudy\",\n            \"date\": \"2017-03-15\",\n            \"day\": \"Wednesday\",\n            \"shortday\": \"Wed\",\n            \"precip\": \"20\"\n        },\n        {\n            \"low\": \"50\",\n            \"high\": \"64\",\n            \"skycodeday\": \"28\",\n            \"skytextday\": \"Mostly Cloudy\",\n            \"date\": \"2017-03-16\",\n            \"day\": \"Thursday\",\n            \"shortday\": \"Thu\",\n            \"precip\": \"10\"\n        },\n        {\n            \"low\": \"53\",\n            \"high\": \"67\",\n            \"skycodeday\": \"32\",\n            \"skytextday\": \"Sunny\",\n            \"date\": \"2017-03-17\",\n            \"day\": \"Friday\",\n            \"shortday\": \"Fri\",\n            \"precip\": \"10\"\n        }\n    ]\n}\n\nasync function getData(city: string) {\n    const resp = await fetch(\n        encodeURI(\n            `https://weather.service.msn.com/data.aspx?weasearchstr=${city}&culture=ru-RU&weadegreetype=C&src=outlook`\n        )\n    );\n    const values = await xml2js.parseStringPromise(await resp.text(), { charkey: 'C$', attrkey: 'A$', explicitArray: true, mergeAttrs: true });\n    return values.weatherdata.weather[0] as MsnData;\n}\n\nexport default class MsnProvider implements IProvider {\n    name: string = \"MSN\";\n    async getWeather(city: string) {\n        try {\n            const data = await getData(city);\n            return data.forecast.map(data => new Weather(\n                new Date(data.date[0]),\n                parseFloat(data.high[0]),\n                parseFloat(data.low[0]),\n                data.skytextday[0]\n            ));\n        } catch(e) {\n            console.error(e);\n            return null;\n        }\n    };\n}\n","import IProvider from \"./IProvider\";\nimport Weather from \"../entities/Weather\";\n\ntype OpenWeatherData = {\n    city:{\n        \"id\": number,\n        \"name\": string,\n        \"coord\": {\n          \"lon\": number,\n          \"lat\": number\n        },\n        \"country\": string,\n        \"population\": number,\n        \"timezone\": number\n      },\n    list: {\n        \"dt\": number,\n        \"sunrise\": number,\n        \"sunset\": number,\n        \"temp\": {\n          \"day\": number,\n          \"min\": number,\n          \"max\": number,\n          \"night\": number,\n          \"eve\": number,\n          \"morn\": number\n        },\n        \"feels_like\": {\n          \"day\": number,\n          \"night\": number,\n          \"eve\": number,\n          \"morn\": number\n        },\n        \"pressure\": number,\n        \"humidity\": number,\n        \"weather\": [\n          {\n            \"id\": number,\n            \"main\": string,\n            \"description\": string,\n            \"icon\": string\n          }\n        ],\n        \"speed\": number,\n        \"deg\": number,\n        \"clouds\": number\n    }[]\n    cod:number,\n    cnt: number\n}\n\nasync function getData(city: string, apiKey: string): Promise<OpenWeatherData> {\n    //@ts-ignore-next-line\n    const weather = await import('openweather-apis');\n    weather.setLang('ru');\n    weather.setUnits('metric');\n    weather.setCity(city);\n    weather.setAPPID(apiKey);\n    return new Promise((resolve, reject) => weather.getWeatherForecastForDays(5, function(err: string, obj: OpenWeatherData){\n        if (!err) {\n            resolve(obj);\n        } else {\n            reject(err)\n        }\n    }));\n}\n\nexport default class OpenWeatherProvider implements IProvider {\n    public readonly name: string = \"OpenWeather\";\n    constructor(private readonly apiKey: string) { }\n    async getWeather(city: string) {\n        try {\n            const {list} = await getData(city,this.apiKey);\n            return list.map((next) => new Weather(\n                new Date(parseInt(`${next.dt}000`)),\n                next.temp.day,\n                next.temp.night,\n                next.weather[0].description\n            ));\n        } catch(e) {\n            console.error(e);\n            return null;\n        }\n    }\n}","import { AppBar, Box, Card, CardContent, CardHeader, Checkbox, createStyles, CssBaseline, Divider, Drawer, FormControlLabel, FormGroup, IconButton, Paper, TextField, Theme, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport clsx from 'clsx';\nimport moment from \"moment\";\nimport \"moment/locale/ru\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Weather from './entities/Weather';\nimport IProvider from \"./providers/IProvider\";\nimport MsnProvider from \"./providers/MsnProvider\";\nimport OpenWeatherProvider from './providers/OpenWeatherProvider';\n\nconst providers: IProvider[] = [\n  new OpenWeatherProvider(\"6d0e27996f99802be89d9575a5dfb7ca\"),\n  new MsnProvider()\n];\n\nmoment.locale(\"ru-RU\");\n\nconst drawerWidth = 240;\n\nconst styles = (theme: Theme) => createStyles({\n  root: {\n    paddingTop: 64\n  },\n  providerHeader: {\n    display: \"inline-block\",\n    position: 'sticky', \n    top: 0,\n    opacity: 0.6\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n})\n\nfunction App({classes}: WithStyles<typeof styles>) {\n  const [datas, setDatas] = useState<{[key: string]:Weather[]}>({});\n  const [selectedProviders, setSelectedProviders] = useState<{[key: string]:boolean}>({});\n  const [city, setCity] = useState<string>(\"\");\n\n  const onChangeCity:  React.ChangeEventHandler<HTMLInputElement> = useCallback(({target: {value}}) => {\n    localStorage.setItem(\"city\",value);\n    setCity(value);\n  },[]);\n\n  useEffect(()=>{\n    const storedProviders = localStorage.getItem(\"selectedProviders\");\n    const storedCity = localStorage.getItem(\"city\");\n    if (storedProviders){\n      setSelectedProviders(JSON.parse(storedProviders));\n    }\n    if (storedCity){\n      setCity(storedCity);\n    }\n  },[]);\n\n\n  useEffect(() => {\n    let breaked = {v:false};\n    const get = async () => {\n      const data: {[key: string]: Weather[]} = {};\n      for (const provider of providers.filter(({name}) => selectedProviders[name] === undefined ? true : selectedProviders[name])) {\n        provider.getWeather(city).then(value=> {\n          data[provider.name] = value || [];\n          if (!breaked.v) {\n            setDatas({...data});\n          }\n        });\n      }\n    };\n    get();\n    return () => {\n      breaked.v = true;\n    }\n  }, [city, selectedProviders]);\n\n  const [open, setOpen] = React.useState(false);\n\n  const toggleDrawerOpen = useCallback(() => {\n    setOpen(open=>!open);\n  },[]);\n\n  useEffect(()=>{\n    localStorage.setItem(\"selectedProviders\",JSON.stringify(selectedProviders));\n  },[selectedProviders]);\n\n  return (\n    <>\n      <CssBaseline/>\n      <AppBar \n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={toggleDrawerOpen}\n            edge=\"start\"\n            className={classes.menuButton}\n          >\n            <Menu/>\n          </IconButton>\n          <Paper>\n            <Box padding={1}>\n              <TextField\n                name=\"city\" \n                label=\"Город\" \n                value={city}\n                onChange={onChangeCity}\n              />\n            </Box>\n          </Paper>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <Typography>Провайдеры</Typography>\n        <FormGroup >\n          {providers.map(({name})=>(\n            <FormControlLabel label={name} control={\n              <Checkbox\n                name={`checked${name}`}\n                color=\"primary\"\n                checked={selectedProviders[name] === undefined ? true : selectedProviders[name]}\n                onChange={(_,checked)=> setSelectedProviders(selectedProviders=> ({\n                  ...selectedProviders,\n                  [name]: checked\n                }))}\n              />\n            }/>\n          ))}\n        </FormGroup>\n      </Drawer>\n      <Box display=\"flex\" flexDirection=\"column\" height={1} overflow=\"hidden\" className={classes.root}>\n        <Box flex={1} overflow=\"auto\">\n            {Object.keys(datas).map((provider)=> (\n                <Box key={provider} padding={3}>\n                  <Typography variant=\"h4\" className={classes.providerHeader}>{provider}</Typography>\n                  <Box paddingTop={3} paddingBottom={3}>\n                    <Box display=\"flex\" flexDirection='row'>\n                      {datas[provider].map((data,idx) => (\n                        <Box\n                          key={idx}\n                          flex={1} \n                          padding={1} \n                          paddingLeft={idx === 0 ? 0 : undefined}\n                          paddingRight={datas[provider].length - 1 === idx ? 0 : undefined}\n                        >\n                          <Box component={Card} height={1} >\n                            <CardHeader title={moment(data.date).format(\"dddd, LD\")}/>\n                            <CardContent>\n                              <Typography variant=\"subtitle2\">Днем: <b>{data.tempreratureDay}&#176;</b></Typography>\n                              <Typography variant=\"subtitle2\">Ночью: <b>{data.tempreratureNight}&#176;</b></Typography>\n                              <Typography variant=\"subtitle1\">{data.description}</Typography>\n                            </CardContent>\n                          </Box>\n                        </Box>\n                      ))}\n                    </Box>\n                  </Box>\n                  <Divider/>\n                </Box>\n            ))}\n        </Box>\n      </Box>\n    </>\n  );\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}